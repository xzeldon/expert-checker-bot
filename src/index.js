/* eslint-disable no-console */

require('dotenv').config({ path: './config.env' });
const { VK } = require('vk-io');
const { HearManager } = require('@vk-io/hear');
const fs = require('fs-extra');

const { promisify } = require('util');

const { client, DB_PATH } = require('./cacher');
const fetchChart = require('./fetchChart');

fs.ensureFile(DB_PATH);

const getAsync = promisify(client.get).bind(client);

const vk = new VK({
	token: process.env.GROUP_TOKEN
});

fetchChart(vk); // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

setInterval(async () => { // –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–µ—Ñ–æ–ª—Ç —Ä–∞–∑ –≤ 24 —á–∞—Å–∞)
	fetchChart(vk);

	return vk.api.call('messages.send', { // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏
		peer_ids: process.env.ADMIN_ID,
		message: '–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
		random_id: 0
	});
}, 86400000);

const hearManager = new HearManager();

const devMode = (context, next) => (context.senderId === Number(process.env.ADMIN_ID) ? next() : 0);

vk.updates.on('message', (context, next) => {
	process.env.MODE === 'development' ? devMode(context, next) : next();
});

vk.updates.on('message_new', hearManager.middleware);

const generateStats = (parsedUser) => `
	üßê ID: @id${parsedUser.user_id}
		üî• –¢–µ–º–∞—Ç–∏–∫–∞: ${parsedUser.topic_name}
		üèÜ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: ${parsedUser.position}
	`;

hearManager.hear('–∫–µ—à', async (context) => { // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∫–∞–ø—á–∞.
	if (context.senderId === Number(process.env.ADMIN_ID)) {
		await fetchChart(vk);
		return vk.api.call('messages.send', {
			peer_ids: process.env.ADMIN_ID,
			message: '–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
			random_id: 0
		});
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º—ã —Å–∞–º–∏ (–∞–¥–º–∏–Ω), —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–∫–µ—Ä.
	return context.send({ sticker_id: Number(process.env.STICKER_ID) });
});

hearManager.hear(/^(?:—á–µ–∫)\s?([0-9]+|[id{\d}|@([A-Za-z]+(?:\.\w+)*])?$/i, async (context) => {
	let user;
	let userId;
	let screen_name;

	context.$match[1] ? screen_name = context.$match[1].replace(/\[+(.*?)\]+/g, '$1') : screen_name = undefined;

	const idRegEx = /^id[0-9]+$/;

	if (screen_name) {
		screen_name = context.$match[1].replace(/\[+(.*?)\]+/g, '$1');
		screen_name = screen_name.replace(/\|.+/g, "$'");
	}

	if (idRegEx.test(screen_name)) {
		userId = screen_name.replace(/\D/g, '');
	}

	if (!userId) {
		context.$match[1] ? userId = context.$match[1] : userId = context.senderId;
		context.hasReplyMessage ? userId = context.replyMessage.senderId : undefined;
	}

	if (context.hasForwards) {
		context.forwards.length === 1 ? userId = context.forwards[0].senderId : undefined;

		if (context.forwards.length > 1) {
			let list = ''; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
			let ids = []; // —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–π–¥–∏—à–Ω–∏–∫–æ–≤
			for (let i = 0; i < context.forwards.length; i++) { // –ø—É—à–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–π–¥–∏—à–Ω–∏–∫–∏ –≤ ids
				ids.push(context.forwards[i].senderId);
			}

			ids = [...new Set(ids)]; // —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∞–π–¥–∏—à–Ω–∏–∫–∏

			for (let i = 0; i < ids.length; i++) {
				let user;

				// eslint-disable-next-line no-return-assign, no-loop-func
				context.append = (_list) => list += `${_list}\n`;

				user = await getAsync(ids[i]);

				if (user) {
					user = JSON.parse(user);
					context.append(generateStats(user));
				} else {
					context.append(`
					üßê ID: @id${ids[i]}
					‚ùå –ù–µ —ç–∫—Å–ø–µ—Ä—Ç
					`);
				}
			}
			return context.send(list, {
				disable_mentions: 1
			});
		}
	}

	if (context.replyMessage) { // –µ—Å–ª–∏ –¥–æ–¥–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–º –≥—Ä—É–ø–ø—É, –∞ –Ω–µ —é–∑–µ—Ä–∞
		if (context.replyMessage.senderType === 'group') {
			// —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–∫–µ—Ä <3
			context.send({ sticker_id: Number(process.env.STICKER_ID) });
			return 1;
		}
	}

	try {
		user = await getAsync(userId);
	} catch (err) {
		console.error(err);
	}

	if (!user) {
		context.send('–ù–µ —ç–∫—Å–ø–µ—Ä—Ç');
		return 1;
	}

	user = JSON.parse(user);
	context.send(generateStats(user), {
		disable_mentions: 1
	});

	return 0;
});

vk.updates.start().catch(console.error);
